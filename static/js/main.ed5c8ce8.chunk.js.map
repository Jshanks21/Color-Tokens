{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","mint","_ref","asyncToGenerator","regenerator_default","a","mark","_callee4","color","web3","accounts","wrap","_context4","prev","next","window","eth","getAccounts","sent","setState","account","state","contract","methods","send","from","once","receipt","colors","concat","toConsumableArray","stop","_x","apply","arguments","totalSupply","loadWeb3","loadBlockchainData","ethereum","Web3","enable","currentProvider","alert","net","getId","networkId","networkData","Color","networks","abi","address","Contract","i","_this2","react_default","createElement","className","href","target","rel","id","role","onSubmit","event","preventDefault","value","type","placeholder","ref","input","map","key","style","backgroundColor","Component","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed5c8ce8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport Color from '../abis/Color.json'\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n\n    const networkId = await web3.eth.net.getId()\n    const networkData = Color.networks[networkId]\n    if(networkData) {\n      const abi = Color.abi\n      const address = networkData.address\n      const contract = new web3.eth.Contract(abi, address)\n      this.setState({ contract })\n      const totalSupply = await contract.methods.totalSupply().call()\n      this.setState({ totalSupply })\n      // Load colors\n      for(let i = 1; i <= totalSupply; i++) {\n        const color = await contract.methods.colors(i - 1).call()\n        this.setState({\n          colors: [...this.state.colors, color] // Spread operator to append color to colors array\n        })\n      }\n    } else {\n      window.alert('Smart contract not deployed to detected network. Please switch to the Ropsten Test Network.')\n    }\n\n  }\n\n  mint = async (color) => {\n    const web3 = window.web3\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    this.state.contract.methods.mint(color).send({ from: this.state.account })\n    .once('receipt', (receipt) => {\n      this.setState({\n        colors: [...this.state.colors, color]\n      })\n    })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      contract: null,\n      totalSupply: 0,\n      colors: []\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"http://www.dappuniversity.com/bootcamp\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Color Tokens\n          </a>\n          <ul className=\"navbar-nav px-3\">\n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n              <small className=\"text-white\"><span id=\"account\">{this.state.account}</span></small>\n            </li>\n          </ul>\n        </nav>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n                <h1>Issue Token</h1>\n                  <form onSubmit={(event) => {\n                    event.preventDefault()\n                    const color = this.color.value\n                    this.mint(color)\n                    }}>\n                    <input\n                      type='text'\n                      className='form-control mb-1'\n                      placeholder='e.g. #FFFFFF'\n                      ref={(input) => { this.color = input }}\n                    />\n                    <input\n                      type='submit'\n                      className='btn btn-block btn-primary'\n                      value='MINT'\n                    />\n                    <hr />\n                    <div className=\"alert alert-warning\">\n                      <strong className=\"d-flex justify-content-center\">Live only on the Ropsten testnet.</strong>\n                      <span\n                        className=\"d-flex justify-content-center\"\n                        >\n                        Get your test Ether\n                        <a href=\"https://faucet.metamask.io/\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          >\n                          &nbsp;here.\n                        </a>\n                      </span>\n                    </div>\n                  </form>\n              </div>\n            </main>\n          </div>\n          <hr/>\n          <div className=\"row text-center\">\n            { this.state.colors.map((color, key) => {\n              return(\n                <div key={key} className=\"col-md-3 mb-3\">\n                  <div className=\"token\" style={{ backgroundColor: color }}></div>\n                  <div>{color}</div>\n                </div>\n              )\n            })}\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}